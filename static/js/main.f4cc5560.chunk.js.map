{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Score","_ref","score","console","log","react_default","a","createElement","UpdatePlayersBtn","handleUpdatePlayers","_this","props","updatePlayers","onClick","this","PureComponent","Players","_ref2","players","Fragment","map","player","key","id","name","App_UpdatePlayersBtn","UpdateScoreBtn","state","color","handleUpdateScoreClick","_this2","updateScore","handleUpdateColorClick","setState","prevState","style","background","App","yards","team_1","team_2","_this3","newPlayerId","Math","max","apply","Object","toConsumableArray","p","newPlayer","concat","_this4","setInterval","random","className","App_Score","App_UpdateScoreBtn","App_Players","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f4cc5560.chunk.js","sourcesContent":["import React, { PureComponent, Component } from 'react';\nimport './App.css';\n\nconst Score = ({score}) => {\n  console.log('Render Score');\n  return <p>{score}</p>\n}\n\nclass UpdatePlayersBtn extends PureComponent {\n  handleUpdatePlayers = () => {\n    this.props.updatePlayers();\n  }\n  render() {\n    console.log('Render UpdatePlayersBtn');\n    return <button onClick={this.handleUpdatePlayers}>updatePlayers</button>\n  }\n}\n\nconst Players = ({players, updatePlayers}) => {\n  console.log('Render Players');\n  return (\n    <React.Fragment>\n      <ul>\n        {players.map(player => <li key={player.id}>{player.name}</li>)}\n      </ul>\n      <UpdatePlayersBtn \n        updatePlayers={updatePlayers}\n      />\n    </React.Fragment>    \n  )\n}\n\nclass UpdateScoreBtn extends PureComponent {\n  state = {\n    color: 'red'\n  }\n  handleUpdateScoreClick = () => {\n    this.props.updateScore();\n  }\n  handleUpdateColorClick = () => {    \n    this.setState(prevState => ({color: prevState.color === 'red' ? 'blue' : 'red'}));\n  }\n  render() {\n    console.log('Render UpdateScoreBtn');\n    return (\n      <React.Fragment>\n        <button onClick={this.handleUpdateScoreClick}>Update Score</button>\n        <hr/>\n        <button style={{background: this.state.color}} onClick={this.handleUpdateColorClick}>Update Color</button>\n        <hr/>\n      </React.Fragment>      \n    )\n  }\n}\n\nclass App extends PureComponent {\n  state = {\n    score: 0,\n    yards : {\n      team_1: 1,\n      team_2: 1,\n    },\n    players: [{id: 1, name: 'player 1'}, {id: 2, name: 'player 2'}]\n  }\n\n  updateScore = () => {\n    this.setState(prevState => ({score: prevState.score + 1}))\n  }\n\n  handleUpdatePlayers = () => {\n    const newPlayerId = Math.max(...this.state.players.map(p => p.id)) + 1;\n    const newPlayerName = `player ${newPlayerId}`\n    const newPlayer = {id: newPlayerId, name: newPlayerName};\n    this.setState(prevState => ({players: [...prevState.players, newPlayer]}))\n  }\n\n  componentDidMount() {\n    setInterval(() => {\n      console.log('tick');\n      if (Math.random() > .8) {\n        console.log('Score +');\n        this.updateScore();\n      }\n      if (Math.random() < .2) {\n        console.log('Score =');\n        this.setState(prevState => ({score: prevState.score}));\n      }\n    }, 2500);\n  }\n\n  render() {\n    console.log('Render App', this.state);\n    return (\n      <div className=\"App\">\n        <Score score={this.state.score} />\n        <UpdateScoreBtn updateScore={this.updateScore}/>\n        <Players players={this.state.players} updatePlayers={this.handleUpdatePlayers}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}